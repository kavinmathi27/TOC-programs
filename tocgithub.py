# -*- coding: utf-8 -*-
"""TOCgithub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14oPaFpchg-PKEQvBjBl5McIsxv--vFDA
"""

import re

def optimize_code(code_lines):
    optimized = []
    values = {}

    for line in code_lines:
        var, expr = map(str.strip, line.split("="))

        # Constant Folding
        if re.match(r'^\d+ \* \d+$', expr):  # e.g., 2 * 8
            val = eval(expr)
            values[var] = val
            optimized.append(f"{var} = {val}")

        # Strength Reduction (x * 1 → x, y + 0 → y)
        elif re.match(r'^[a-zA-Z]\w* \* 1$', expr):
            src = expr.split("*")[0].strip()
            values[var] = values.get(src, src)
            optimized.append(f"{var} = {src}")

        elif re.match(r'^[a-zA-Z]\w* \+ 0$', expr):
            src = expr.split("+")[0].strip()
            values[var] = values.get(src, src)
            optimized.append(f"{var} = {src}")

        else:
            optimized.append(line)

    # Dead Code Elimination (remove unused variables)
    used_vars = set("".join(optimized).replace("=", " ").split())
    final_code = [line for line in optimized if line.split("=")[0].strip() in used_vars]

    return final_code


# --- INPUT ---
code = [
    "x = 2 * 8",
    "y = x * 1",
    "z = y + 0"
]

# --- OUTPUT ---
optimized = optimize_code(code)
print("\n".join(optimized))

# Convert infix to postfix (Reverse Polish Notation)
def infix_to_postfix(expr):
    precedence = {'+':1, '-':1, '*':2, '/':2}
    stack = []
    output = []
    tokens = [ch for ch in expr if ch.strip()]  # split into characters

    for token in tokens:
        if token.isalnum():  # variable or number
            output.append(token)
        elif token in precedence:
            while stack and stack[-1] in precedence and precedence[stack[-1]] >= precedence[token]:
                output.append(stack.pop())
            stack.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()  # pop '('

    while stack:
        output.append(stack.pop())

    return output

# Translate postfix to stack assembly
def postfix_to_stack(postfix):
    output = []
    for token in postfix:
        if token.isalnum():
            output.append(f"PUSH {token}")
        else:
            if token == '+':
                output.append("ADD")
            elif token == '-':
                output.append("SUB")
            elif token == '*':
                output.append("MUL")
            elif token == '/':
                output.append("DIV")
    return output

# Main
expr = "(a+b)*c"
postfix = infix_to_postfix(expr)
assembly = postfix_to_stack(postfix)

print("\n".join(assembly))